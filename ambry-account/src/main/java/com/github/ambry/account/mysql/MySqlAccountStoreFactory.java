/*
 * Copyright 2020 LinkedIn Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */
package com.github.ambry.account.mysql;

import com.codahale.metrics.MetricRegistry;
import com.github.ambry.config.MySqlAccountServiceConfig;
import com.github.ambry.config.VerifiableProperties;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.github.ambry.account.mysql.MySqlUtils.*;


/**
 * Factory class to return an instance of {@link MySqlAccountStore} on {@link #getMySqlAccountStore(boolean)} call
 */
public class MySqlAccountStoreFactory {

  private static final Logger logger = LoggerFactory.getLogger(MySqlAccountStoreFactory.class);
  protected final MySqlAccountServiceConfig accountServiceConfig;
  protected final MySqlAccountStoreMetrics metrics;

  /**
   * Constructor.
   * @param  verifiableProperties The properties to get a {@link MySqlAccountStore} instance. Cannot be {@code null}.
   */
  public MySqlAccountStoreFactory(VerifiableProperties verifiableProperties, MetricRegistry metricRegistry) {
    this.accountServiceConfig = new MySqlAccountServiceConfig(verifiableProperties);
    this.metrics = new MySqlAccountStoreMetrics(metricRegistry);
  }

  /**
   * Returns an instance of the {@link MySqlAccountStore} that the factory generates.
   * @param writeable needs to be set to true if requesting a store that accepts writes.
   * @return an instance of {@link MySqlAccountStore} generated by this factory.
   * @throws SQLException
   */
  public MySqlAccountStore getMySqlAccountStore(boolean writeable) throws SQLException {
    Map<String, List<MySqlUtils.DbEndpoint>> dcToMySqlDBEndpoints = getDbEndpointsPerDC(accountServiceConfig.dbInfo);
    for (List<MySqlUtils.DbEndpoint> dbEndpoints : dcToMySqlDBEndpoints.values()) {
      // TODO: Can have logic to try mysql end point on local DC first
      for (MySqlUtils.DbEndpoint dbEndpoint : dbEndpoints) {
        if ((dbEndpoint.isWriteable() && writeable) || (!dbEndpoint.isWriteable() && !writeable)) {
          try {
            return new MySqlAccountStore(dbEndpoint, metrics);
          } catch (SQLException e) {
            logger.error("MySQL account store creation failed", e);
            // TODO: Add logic to retry on different db end point based on type of exception.
            throw e;
          }
        }
      }
    }
    return null;
  }
}
